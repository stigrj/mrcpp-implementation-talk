name: inverse
layout: true
class: center, middle, inverse
---
#MRCPP
##Data structures and algorithms

.author[Stig Rune Jensen]

.date[3 August 2016, Stony Brook, NY]

.footnote[Slides available on [GitHub](https://github.com/stigrj/mrcpp-implementation-talk)]

---

layout: false
.left-column[
## Technical stuff
]
.right-column[
- Hosted on GitHub

- Documentation on ReadTheDocs

- Configuration with (Auto)cmake

- Testing with Catch

- Number crunching with BLAS

- Parallelization with OpenMP
]

---
template: inverse
# Data structures
---

.left-column[
## Data structures
### - MWTree
]
.right-column[
- Functions and operators organized in tree structures

- Memory allocator keeps data localized

- MRA defines
  * Root scale (can be negative)
  * Number of root nodes
  * Type of MW basis (Legendre/Interpolating)
  * Order of MW basis (`\(1 \leq k \leq 40\)`)

```cpp
template<int D>
class MWTree {
    TreeAllocator<D> allocator;      // Memory allocator
    MultiResolutionAnalysis<D> MRA;  // World, MW basis

    std::vector<MWNode<D> *> roots;  // Root container
    std::vector<MWNode<D> *> leaves; // Leaf container

    double squareNorm;               // Squared L^2 norm
    std::vector<int> nodesAtDepth;   // Node counter
}
```
]

---

.left-column[
## Data structures
### - MWTree
### - MWNode
]
.right-column[
- NodeIndex defines
  * Length scale: `\(2^{-n}\)`
  * Translation: `\([l/2^{n},(l+1)/2^{n}]\)`

- Each node keeps __both__ scaling and wavelet coefficients

```cpp
template<int D>
class MWNode {
    NodeIndex<D> idx;           // Scale and translation

    MWTree<D> *tree;            // Tree it belongs to
    MWNode<D> *parent;          // Parent node
    MWNode<D> *children[2^D];   // Children nodes

    double squareNorm;          // Squared L^2 norm
    double componentNorms[2^D]; // Scaling/wavelet norms
    double *coefs;              // Scaling/wavelet coefs
}
```
]

---

.left-column[
## Data structures
### - MWTree
### - MWNode
]
.right-column[



<img src="images/adaptivity.jpg" style="width: 80%">
]

---

.left-column[
## Data structures
### - MWTree
### - MWNode
]
.right-column[
#### Representations

- MRA allows for fine-scale representation

  `$$ f^N = \sum_{l=0}^{2^N-1}\sum_{j=0}^{k} s_{jl}^N \phi_{jl}^N(x) $$`

- or multi-scale representation

  `$$ f^N = \sum_{j=0}^{k} s_{jl}^0 \phi_{jl}^0(x) +
  \sum_{n=0}^{N-1}\sum_{l=0}^{2^N-1}\sum_{j=0}^{k} w_{jl}^n \psi_{jl}^n(x) $$`

- We keep a __redundant__ representation of both scaling and wavelet
  coefficients on __all__ scales
]

---

.left-column[
## Data structures
### - MWTree
### - MWNode
]
.right-column[
#### Transformations

- We can go from a `\(V^n \oplus W^n\)` representation
  to a `\(V^{n+1}\)` representation using the MW transform

- We can go from a `\(V^{n+1}\)` representation to a function value
  representation using the CV transform (coefficient-value)

```cpp
MWNode<D> node;                     // V^{n} + W^{n}

node.mwTransform(Reconstruction);   // V^{n+1}
    
node.cvTransform(Forward);          // Function values
    
node.cvTransform(Backward);         // V^{n+1}
    
node.mwTransform(Compression);      // V^{n} + W^{n}
```
]

---

.left-column[
## Data structures
### - MWTree
### - MWNode
]
.right-column[
#### Transformations

- Often require nodes beyond the finest refinement level

- Information available by MW transform

- Corresponds to an oversampling of the function

- Possible strategies
  * perform MW transforms on the fly whenever needed
  * extend the tree with temporary nodes for later use

- GenNodes
  * generated by MW transform
  * only scaling coefs (wavelet coefs are zero)
  * kept until the particular operation is completed
]

---

.left-column[
## Data structures
### - MWTree
### - MWNode
]
.right-column[
#### Multiple dimensions

- Extenstion to `\(d\)` dimensions by tensor product

 `$$
    \Big(V^n\Big)^d = \bigotimes_{p=1}^d V^n
  $$`

- Wavelet decomposition i 2D

 `$$
    \Big(V^{n+1}\Big)^2 = V^{n+1} \otimes V^{n+1} = 
    \Big(V^{n} \oplus W^{n}\Big) \otimes
    \Big(V^{n} \oplus W^{n}\Big)\\
    = \Big(V^{n} \otimes V^{n}\Big) \oplus
    \Big(V^{n} \otimes W^{n}\Big) \oplus
    \Big(W^{n} \otimes V^{n}\Big) \oplus
    \Big(W^{n} \otimes W^{n}\Big)\\
    = \Big(V^n\Big)^2\oplus \Big(W^n\Big)^2
  $$`

- Wavelet space has dimension `\(2^d-1\)`
]

---

layout: false
.left-column[
## Data structures
### - MWTree
### - MWNode
### - MWOperator
]
.right-column[
#### Convolution operators
- General nD integral operator

  `$$ 
    \hat{T}f(\boldsymbol{x}) = 
    \int K(\boldsymbol{x},\boldsymbol{y})f(\boldsymbol{y}) d\boldsymbol{y}
   $$`

- Separable representation

  `$$
    K(\boldsymbol{x},\boldsymbol{y}) \approx 
    \tilde{K}(\boldsymbol{x},\boldsymbol{y}) =
    \sum_\kappa^M \alpha_\kappa \prod_{p=1}^d K_p^\kappa(x_p,y_p)
   $$`

- Find parameters such that

  `$$
    sup_y\left|\frac{K(\boldsymbol{x},\boldsymbol{y}) -
    \tilde{K}(\boldsymbol{x},\boldsymbol{y})}
    {K(\boldsymbol{x},\boldsymbol{y})}\right| \leq
    \epsilon
   $$`

- Decompose into a sum of products of 1D operators

- Reduce the complexity from `\(k^{2d}\)` to `\(Mdk^{d+1}\)`
]

---

layout: false
.left-column[
## Data structures
### - MWTree
### - MWNode
### - MWOperator
]
.right-column[
#### Poisson operator
- The Poisson equation relates the electrostatic potential `\(V\)`
  to the charge density `\(\rho\)`
 
  `$$
    \nabla^2 V(\boldsymbol{x}) = -\rho(\boldsymbol{x})
   $$`

- Direct solution in integral form
  `$$
    V(\boldsymbol{x}) =
    \int P(\boldsymbol{x},\boldsymbol{y})\rho(\boldsymbol{y}) d\boldsymbol{y}
   $$`

- Poisson kernel

  `$$
    P(\boldsymbol{x},\boldsymbol{y}) = \frac{1}{4\pi\|\boldsymbol{x}-\boldsymbol{y}\|}
   $$`

- Numerical problems
  * Non-separable
  * Singularity at short range
  * Slow decay at long range
]

---

layout: false
.left-column[
## Data structures
### - MWTree
### - MWNode
### - MWOperator
]
.right-column[
#### Poisson operator
- Poisson kernel separated in terms of Gaussians
  `$$
    P(\boldsymbol{x},\boldsymbol{y}) \approx
    \tilde{P}(\boldsymbol{x},\boldsymbol{y}) =
    \sum_\kappa^M \alpha_{\kappa} \prod_{p=1}^d e^{-\beta_{\kappa}(x_p-y_p)^2}
   $$`

- Expansion obtained from the relation

  `$$
    \frac{1}{r} = \frac{4}{\sqrt{\pi}}\int_0^\infty e^{-4r^2t^2} dt
   $$`

- Substitution: `\(t = log(1+e^u)-u\)`
  
  `$$
    \frac{1}{r} = \int_{-\infty}^{\infty} f_1(u) du
   $$`

- Substitution: `\(u = -sinh(w)\)`
  
  `$$
    \frac{1}{r} = \int_{-\infty}^{\infty} f_2(w) dw
   $$`

- Super-exponential decay for `\(w \rightarrow \pm \infty\)` 
]

---

layout: false
.left-column[
## Data structures
### - MWTree
### - MWNode
### - MWOperator
]
.right-column[
#### Poisson operator
- Poisson kernel separated in terms of Gaussians

  `$$
    P(\boldsymbol{x},\boldsymbol{y}) \approx
    \tilde{P}(\boldsymbol{x},\boldsymbol{y}) =
    \sum_\kappa^M \alpha_{\kappa} \prod_{p=1}^d e^{-\beta_{\kappa}(x_p-y_p)^2}
   $$`

<img src="images/kernel_1.jpg" style="width: 80%; float: left">

]

---

layout: false
.left-column[
## Data structures
### - MWTree
### - MWNode
### - MWOperator
]
.right-column[
#### Poisson operator
- Poisson kernel separated in terms of Gaussians

  `$$
    P(\boldsymbol{x},\boldsymbol{y}) \approx
    \tilde{P}(\boldsymbol{x},\boldsymbol{y}) =
    \sum_\kappa^M \alpha_{\kappa} \prod_{p=1}^d e^{-\beta_{\kappa}(x_p-y_p)^2}
   $$`

<img src="images/kernel_2.jpg" style="width: 80%; float: left">

]

---

layout: false
.left-column[
## Data structures
### - MWTree
### - MWNode
### - MWOperator
]
.right-column[
#### Poisson operator
- Poisson kernel separated in terms of Gaussians

  `$$
    P(\boldsymbol{x},\boldsymbol{y}) \approx
    \tilde{P}(\boldsymbol{x},\boldsymbol{y}) =
    \sum_\kappa^M \alpha_{\kappa} \prod_{p=1}^d e^{-\beta_{\kappa}(x_p-y_p)^2}
   $$`

<img src="images/kernel_3.jpg" style="width: 80%; float: left">

]

---

layout: false
.left-column[
## Data structures
### - MWTree
### - MWNode
### - MWOperator
]
.right-column[
#### Poisson operator
- Poisson kernel separated in terms of Gaussians

  `$$
    P(\boldsymbol{x},\boldsymbol{y}) \approx
    \tilde{P}(\boldsymbol{x},\boldsymbol{y}) =
    \sum_\kappa^M \alpha_{\kappa} \prod_{p=1}^d e^{-\beta_{\kappa}(x_p-y_p)^2}
   $$`

<img src="images/kernel_4.jpg" style="width: 80%; float: left">

]

---

layout: false
.left-column[
## Data structures
### - MWTree
### - MWNode
### - MWOperator
]
.right-column[
#### Poisson operator
- Poisson kernel separated in terms of Gaussians

  `$$
    P(\boldsymbol{x},\boldsymbol{y}) \approx
    \tilde{P}(\boldsymbol{x},\boldsymbol{y}) =
    \sum_\kappa^M \alpha_{\kappa} \prod_{p=1}^d e^{-\beta_{\kappa}(x_p-y_p)^2}
   $$`

<img src="images/kernel_5.jpg" style="width: 80%; float: left">

]

---

layout: false
.left-column[
## Data structures
### - MWTree
### - MWNode
### - MWOperator
]
.right-column[
#### Poisson operator
- Poisson kernel separated in terms of Gaussians

  `$$
    P(\boldsymbol{x},\boldsymbol{y}) \approx
    \tilde{P}(\boldsymbol{x},\boldsymbol{y}) =
    \sum_\kappa^M \alpha_{\kappa} \prod_{p=1}^d e^{-\beta_{\kappa}(x_p-y_p)^2}
   $$`

<img src="images/kernel_6.jpg" style="width: 80%; float: left">

]

---

layout: false
.left-column[
## Data structures
### - MWTree
### - MWNode
### - MWOperator
]
.right-column[
#### Poisson operator
- Poisson kernel separated in terms of Gaussians

  `$$
    P(\boldsymbol{x},\boldsymbol{y}) \approx
    \tilde{P}(\boldsymbol{x},\boldsymbol{y}) =
    \sum_\kappa^M \alpha_{\kappa} \prod_{p=1}^d e^{-\beta_{\kappa}(x_p-y_p)^2}
   $$`

<img src="images/kernel_7.jpg" style="width: 80%; float: left">

]

---

layout: false
.left-column[
## Data structures
### - MWTree
### - MWNode
### - MWOperator
]
.right-column[
#### Poisson operator
- Poisson kernel separated in terms of Gaussians

  `$$
    P(\boldsymbol{x},\boldsymbol{y}) \approx
    \tilde{P}(\boldsymbol{x},\boldsymbol{y}) =
    \sum_\kappa^M \alpha_{\kappa} \prod_{p=1}^d e^{-\beta_{\kappa}(x_p-y_p)^2}
   $$`

- Solves numerical problems
  * Separates coordinates
  * Remove singularity
  * Separates length scales

- However
  * `\(M\)` convolution operators instead of one
]

---

layout: false
.left-column[
## Data structures
### - MWTree
### - MWNode
### - MWOperator
]
.right-column[
#### Convolution operators
- Operator reduced to 1D convolutions with Gaussians

  `$$ 
    g(x) = \hat{T}f(x) = \int \alpha e^{-\beta (x-y)^2} f(y) dy
   $$`

- MW representation by scaling projection of the 2D kernel

  `$$ 
    \tau_{lm}^N = \int \int K(x,y) \phi_l^N(x)\phi_m^N(y) dxdy
   $$`

- `\(l\)` and `\(m\)` are translation indices of nodes
  in the output and input functions, respectively

- MW transform to obtain wavelet terms (2D gives 4 components)

  `$$
    T^{N} = T^{N-1} + C^{N-1} + B^{N-1} + A^{N-1}
   $$`

]

---

layout: false
.left-column[
## Data structures
### - MWTree
### - MWNode
### - MWOperator
]
.right-column[
#### Convolution operators
  `$$
    T^{N} = T^{N-1} + C^{N-1} + B^{N-1} + A^{N-1}
   $$`

#### Vanishing moments

<img src="images/vanishing_moments.jpg" style="width: 100%; float: left">


]


---

layout: false
.left-column[
## Data structures
### - MWTree
### - MWNode
### - MWOperator
]
.right-column[
#### Convolution operators
  `$$
    T \approx \Bigg(T^{N+1}\Bigg)
   $$`
<img src="images/matrix/mat_1.jpg" style="width: 100%; float: left">

]

---

layout: false
.left-column[
## Data structures
### - MWTree
### - MWNode
### - MWOperator
]
.right-column[
#### Convolution operators
  `$$
    T \approx \Bigg(T^{N} + C^{N} + B^{N} + A^{N}\Bigg)
   $$`
<img src="images/matrix/mat_2.jpg" style="width: 100%; float: left">

]

---

layout: false
.left-column[
## Data structures
### - MWTree
### - MWNode
### - MWOperator
]
.right-column[
#### Convolution operators
  `$$
    T \approx \Bigg(T^{N}\Bigg) + \Bigg(C^{N} + B^{N} + A^{N}\Bigg)
   $$`
<img src="images/matrix/mat_3.jpg" style="width: 100%; float: left">

]

---

layout: false
.left-column[
## Data structures
### - MWTree
### - MWNode
### - MWOperator
]
.right-column[
#### Convolution operators
  `$$
    T \approx
    \Bigg(T^{N-1} + C^{N-1} + B^{N-1} + A^{N-1}\Bigg) +
    \Bigg(C^{N} + B^{N} + A^{N}\Bigg)
   $$`
<img src="images/matrix/mat_4.jpg" style="width: 100%; float: left">

]

---

layout: false
.left-column[
## Data structures
### - MWTree
### - MWNode
### - MWOperator
]
.right-column[
#### Convolution operators
  `$$
    T \approx
    \Bigg(T^{N-1}\Bigg) +
    \Bigg(C^{N-1} + B^{N-1} + A^{N-1}\Bigg) +
    \Bigg(C^{N} + B^{N} + A^{N}\Bigg)
   $$`
<img src="images/matrix/mat_5.jpg" style="width: 100%; float: left">

]

---

layout: false
.left-column[
## Data structures
### - MWTree
### - MWNode
### - MWOperator
]
.right-column[
#### Convolution operators
  `$$
    T \approx
    T^{N-2} +
    \sum_{n=N-2}^N \Bigg(C^{n} + B^{n} + A^{n}\Bigg)
   $$`
<img src="images/matrix/mat_6.jpg" style="width: 100%; float: left">

]

---

layout: false
.left-column[
## Data structures
### - MWTree
### - MWNode
### - MWOperator
]
.right-column[
#### Convolution operators

- Wavelet components are bounded as

  `$$
    \|A_{l-m}\|_2 + \|B_{l-m}\|_2 + \|C_{l-m}\|_2 \leq 
    \frac{1}{1 + |l-m|^{k+2}}
   $$`

- Terms beyond a certain __bandwidth__ are neglected
]

---

layout: false
.left-column[
## Data structures
### - MWTree
### - MWNode
### - MWOperator
]
.right-column[
#### Convolution operators

- MW operators are 2D trees

- Operator decompositions
  * Gaussian expansion
  * Separated dimension
  * Separated length scales
  * MW decomposition
  `$$
    T \approx T^0 + \sum_{n=0}^{N-1} \Bigg(C^n + B^n + A^n\Bigg)
   $$`

- Linear scaling
  * Vanishing moments
  * Thresholding
  * Bandwidths
]

---
template: inverse
# Algorithms
---

layout: false
.left-column[
## Algorithms
### - Adaptivity
]
.right-column[
- MWTrees are built adaptively

```
while number of nodes in current list > 0 do
  for each output node in current list do
    calc node
    if split check do
      allocate children nodes
    end if
  end for
  update list with children nodes
end while
```

]

---

layout: false
.left-column[
## Algorithms
### - Adaptivity
]
.right-column[
- MWTrees are built adaptively

- calc node
  * Projection
  * Addition
  * Multiplication
  * Operator application

- split check
  * based on wavelet norm (in practice `\(d=1\)`

  `$$
    \|w_l^n\| \geq \epsilon \frac{\|f\|}{2^{-dn/2}}
   $$`

- MW transform
  * wavelet decomposition from leaf to root
  * update coarser scaling coefficients
]

---

layout: false
.left-column[
## Algorithms
### - Adaptivity
### - Projection
]
.right-column[
- Scaling coefficients obtained by the projection

  `$$
    s_{jl}^n = \int f(x)\phi_{jl}^n(x) dx
   $$`

- Approximated by Gauss-Legendre quadrature

  `$$
    s_{jl}^n \approx 2^{-n/2} \sum_q \omega_q f(2^{-n}x_q + l)\phi(x_q)
   $$`

- Interpolating basis `\(\phi_j(x_i) = \delta_{ij}/\sqrt{\omega_i}\)`

  `$$
    s_{jl}^n \approx 2^{-n/2} \omega_j f(2^{-n}x_j + l)\phi(x_j)
   $$`

- Perform scaling projection at the `\(n+1\)` quadrature points

- MW transform provides the s/w coefficients at scale `\(n\)`

  `$$
    V^{n+1} \rightarrow V^n \oplus W^n
   $$`
]

---

layout: false
.left-column[
## Algorithms
### - Adaptivity
### - Projection
### - Addition
]
.right-column[
- Sum is fully contained in the same space

  `$$
    V_k^n + V_k^n \rightarrow V_k^n
   $$`

- Perform addition node by node

  * Fetch corresponding nodes of input

  * Add coefficients

- No extra information beyond finest level

- Could in principle interpolate from finest refinement level

]

---

layout: false
.left-column[
## Algorithms
### - Adaptivity
### - Projection
### - Addition
### - Multiplication
]
.right-column[
- Product spills over into finer scales

  `$$
    V_k^n \times V_k^n \rightarrow V_{2k}^n = V_k^n \oplus
    \bigoplus_{m=n}^{\infty} W_k^m
   $$`

- Perform multiplication node by node
  * Fecth corresponding nodes of input
  * MW transform provides `\(n+1\)` scaling coeffs of inputs 
  * CV transform provides function values of inputs
  * Function values are multiplied pointwise
  * CV transform provides `\(n+1\)` scaling coeffs of output
  * MW transform provides s/w coeffs of output

- Adaptive algorithm takes care of the "spill over"

- Could in principle interpolate from finest refinement level
]

---

layout: false
.left-column[
## Algorithms
### - Adaptivity
### - Projection
### - Addition
### - Multiplication
### - Operator application
]
.right-column[

- Operator applied separately at each length scale (NS form)

- Interactions __between__ length scales by MW transform

- Missing nodes in the input function are generated __once__ by
  MW transform and kept in the tree for later use

- Bandwidths arranged as

  `$$
    A < B,C < T
   $$`

- 3D bandwidths form cubes and rods (`\(T \times A \times A\)`) 

- Only pure scaling (`\(T \times T \times T\)`) discarded in NS form
]

---

layout: false
.left-column[
## Algorithms
### - Adaptivity
### - Projection
### - Addition
### - Multiplication
### - Operator application
]
.right-column[
- Adaptive algorithm

```
while number of nodes in current list > 0 do
  for each output node in current list do
    calc node
    if split check do
      allocate children nodes
    end if
  end for
  update list with children nodes
end while

pass information from root to leaf (MW transform)
```

- calc node

```
construct maximum bandwidth in all directions
fetch all nodes within maximum bandwidth (generate missing)

for each separated component of operator
  for each s/w component of output function
    for each s/w component of input function
      fetch appropriate operator component (e.g. T x A x A)
      construct actual bandwidth 
      fetch input and operator nodes within bandwidth
      prune list (Cauchy-Schwartz)
      for each node in list
        apply operator
      end for
    end for
  end for
end for
```
]

---

layout: false
.left-column[
## Algorithms
### - Adaptivity
### - Projection
### - Addition
### - Multiplication
### - Operator application
]
.right-column[
#### Linear scaling

- Test calculations on linear alkane chains `\(C_nH_{2n+2}\)`

<img src="images/alkane.jpg" style="width: 50%; float: left">
<img src="images/alkane_scaling_1.jpg" style="width: 50%; float: left">
]

---

layout: false
.left-column[
## Algorithms
### - Adaptivity
### - Projection
### - Addition
### - Multiplication
### - Operator application
]
.right-column[
#### Linear scaling

- Test calculations on linear alkane chains `\(C_nH_{2n+2}\)`

<img src="images/alkane.jpg" style="width: 50%; float: left">
<img src="images/alkane_scaling_2.jpg" style="width: 50%; float: left">
]

---
template: inverse
# Parallelization
---

layout: false
.left-column[
## Parallelization
]
.right-column[
- Old strategy
  * Each function distributed among MPI hosts
  * Nodes distributed following strictly localized Hilbert paths
  * Each MPI further decomposed in OpenMP
  * Required large function representations with `\(\sim 10^6\)` nodes
  * Actual function representations `\(\sim 10^3-10^4\)` nodes

- New strategy
  * Shared memory (OpenMP) within each function
  * Whole functions distributed among MPI hosts
  * Focus on sequential optimization and weak scaling
]

---

layout: false
.left-column[
## Parallelization
]
.right-column[
- Currently changing strategies

- Shared memory (OpenMP) within each function

- Whole functions distributed among MPI hosts

]

---

layout: false
.left-column[
## Parallelization
]
.right-column[
- Tree building algorithm

```
while number of nodes in current list > 0 do
    for each output node in current list do
        calcNode()
        if splitNode() do
            allocate children nodes
        end if
    end for
    update list with children nodes
end while
```

]

---

name: last-page
template: inverse

Slideshow created using [remark] and served using [cicero]

[remark]: https://github.com/gnab/remark
[cicero]: https://github.com/bast/cicero
